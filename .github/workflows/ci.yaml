name: Continuous Integration
on:
  push:
    branches:
      - main
      - feature/*

env:
  IS_RELEASE: ${{ github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' }}
  IS_RC: ${{ github.ref == 'refs/heads/rc' }}
  IS_BETA: ${{ github.ref == 'refs/heads/dev' }}
  HUSKY: 0

jobs:
  main:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ github.workspace }}
    strategy:
      matrix:
        node-version: [20]
        npm-version: [9]
        yarn-version: ['1.22.x']
        pnpm-version: [8]
    steps:
      # - name: Checkout [Default Branch]
      #   uses: actions/checkout@v2
      #   if: ${{ github.event_name != 'pull_request' }}
      #   with:
      #     token: ${{ secrets.GH_TOKEN }}
      #     fetch-depth: 0

      - name: Derive appropriate SHAs for base and head for `nx affected` commands
        uses: nrwl/nx-set-shas@v2
        with:
          main-branch-name: ${{ github.base_ref }}

      - name: Detect package manager
        id: package_manager
        run: |
          echo "::set-output name=name::$([[ -f ./yarn.lock ]] && echo "yarn" || ([[ -f ./pnpm-lock.yaml ]] && echo "pnpm") || echo "npm")"

      - name: Set node/npm/yarn versions using volta
        uses: volta-cli/action@fdf4cf319494429a105efaa71d0e5ec67f338c6e
        with:
          node-version: '${{ matrix.node-version }}'
          npm-version: '${{ matrix.npm-version }}'
          yarn-version: '${{ matrix.yarn-version }}'

      - name: Install PNPM
        if: steps.package_manager.outputs.name == 'pnpm'
        uses: pnpm/action-setup@v2.2.1
        with:
          version: '${{ matrix.pnpm-version }}'

      - name: Print node/npm/yarn/pnpm versions
        id: versions
        run: |
          node_ver=$( node --version )
          yarn_ver=$( yarn --version || true )
          pnpm_ver=$( pnpm --version || true )
          echo "Node: ${node_ver:1}"
          echo "NPM: $(npm --version )"
          if [[ $yarn_ver != '' ]]; then echo "Yarn: $yarn_ver"; fi
          if [[ $pnpm_ver != '' ]]; then echo "PNPM: $pnpm_ver"; fi
          echo "::set-output name=node_version::${node_ver:1}"

      - name: Use the node_modules cache if available [npm]
        if: steps.package_manager.outputs.name == 'npm'
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ steps.versions.outputs.node_version }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ steps.versions.outputs.node_version }}-

      - name: Use the node_modules cache if available [pnpm]
        if: steps.package_manager.outputs.name == 'pnpm'
        uses: actions/cache@v2
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-node-${{ steps.versions.outputs.node_version }}-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ steps.versions.outputs.node_version }}-

      - name: Get yarn cache directory path
        if: steps.package_manager.outputs.name == 'yarn'
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Use the node_modules cache if available [yarn]
        if: steps.package_manager.outputs.name == 'yarn'
        uses: actions/cache@v2
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-node-${{ steps.versions.outputs.node_version }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ steps.versions.outputs.node_version }}-

      - name: Git Version
        id: test-action
        uses: codedesignplus/semver-git-version@v0.1.4
        with:
          folder: ${{github.workspace}}
          release-branch: 'main'
          release-candidate-branch: 'rc'
          beta-branch: 'dev'
          major-identifier: 'breaking'
          minor-identifier: 'feat'
          prefix: 'v'
          previous-version: true
          new-version: true

      - name: Print Output
        id: output
        run: |
          echo Previous Tag "${{ steps.test-action.outputs.previous-tag }}"
          echo Previous Version "${{ steps.test-action.outputs.previous-version }}"
          echo Previous Version Prefix "${{ steps.test-action.outputs.previous-version-prefix }}"
          echo New Version "${{steps.test-action.outputs.new-version}}"
          echo New Version Prefix "${{steps.test-action.outputs.new-version-prefix}}"

      - name: Install dependencies
        run: |
          if [ "${{ steps.package_manager.outputs.name == 'yarn' }}" == "true" ]; then
            echo "Running yarn install --frozen-lockfile"
            yarn install --frozen-lockfile
          elif [ "${{ steps.package_manager.outputs.name == 'pnpm' }}" == "true" ]; then
            echo "Running pnpm install --frozen-lockfile"
            pnpm install --frozen-lockfile
          else
            echo "Running npm ci"
            npm ci
          fi

      - run: |
          pnpm run affected
          pnpm run affected:submodule
          pnpm run format:check
          pnpm run affected:lint --target lint --parallel 3
          pnpm run affected:test --target test --parallel 3 --ci --code-coverage
          pnpm run affected:build --target build --parallel 3
          pnpm run publish

      - name: Push tag
        id: push_tag
        # if: env.IS_RELEASE == 'true' || env.IS_RC == 'true' || env.IS_BETA == 'true'
        uses: mathieudutour/github-tag-action@v6.1
        with:
          custom_tag: ${{ steps.test-action.outputs.new-version }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Changelog
        # if: env.IS_RELEASE == 'true' || env.IS_RC == 'true'
        id: build_changelog
        uses: mikepenz/release-changelog-builder-action@v4
        with:
          configuration: '${{ github.workspace }}/.github/settings/configuration.json'
          fromTag: ${{ steps.test-action.outputs.previous-version-prefix }}
          toTag: ${{ steps.test-action.outputs.new-version-prefix }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        # if: env.IS_RELEASE == 'true' || env.IS_RC == 'true'
        uses: mikepenz/action-gh-release@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{ steps.test-action.outputs.new-version-prefix }}
          name: 'codedesignplus/nx@${{ steps.test-action.outputs.new-version-prefix }}'
          body: ${{ steps.build_changelog.outputs.changelog }}
          prerelease: ${{ contains(github.ref, 'rc') || contains(github.ref, 'dev') }}
